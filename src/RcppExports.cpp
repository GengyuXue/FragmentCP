// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// expM
arma::mat expM(const arma::mat& X, const arma::mat& S);
RcppExport SEXP _FragmentCP_expM(SEXP XSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(expM(X, S));
    return rcpp_result_gen;
END_RCPP
}
// RgradQ
arma::mat RgradQ(const arma::mat& Lt, const arma::mat& Lr, const arma::mat& L, const arma::mat& B, const arma::mat& U, const arma::mat& V, const arma::mat& W, const double lam, const arma::vec& weight);
RcppExport SEXP _FragmentCP_RgradQ(SEXP LtSEXP, SEXP LrSEXP, SEXP LSEXP, SEXP BSEXP, SEXP USEXP, SEXP VSEXP, SEXP WSEXP, SEXP lamSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Lt(LtSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Lr(LrSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(RgradQ(Lt, Lr, L, B, U, V, W, lam, weight));
    return rcpp_result_gen;
END_RCPP
}
// RhessianQ
Rcpp::List RhessianQ(const arma::mat& Lt, const arma::mat& Lr, const arma::mat& S, const arma::mat& B, const arma::mat& U, const arma::mat& V, const arma::mat& W, const double lam, const arma::vec& weight, const arma::mat& X);
RcppExport SEXP _FragmentCP_RhessianQ(SEXP LtSEXP, SEXP LrSEXP, SEXP SSEXP, SEXP BSEXP, SEXP USEXP, SEXP VSEXP, SEXP WSEXP, SEXP lamSEXP, SEXP weightSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Lt(LtSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Lr(LrSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(RhessianQ(Lt, Lr, S, B, U, V, W, lam, weight, X));
    return rcpp_result_gen;
END_RCPP
}
// deriv_fourier
arma::mat deriv_fourier(const int& K, const arma::vec& domain, const arma::vec& grid, const int& order);
RcppExport SEXP _FragmentCP_deriv_fourier(SEXP KSEXP, SEXP domainSEXP, SEXP gridSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< const int& >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(deriv_fourier(K, domain, grid, order));
    return rcpp_result_gen;
END_RCPP
}
// evaluate_basis
arma::mat evaluate_basis(const int& K, const arma::vec& domain, const arma::vec& grid);
RcppExport SEXP _FragmentCP_evaluate_basis(SEXP KSEXP, SEXP domainSEXP, SEXP gridSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type grid(gridSEXP);
    rcpp_result_gen = Rcpp::wrap(evaluate_basis(K, domain, grid));
    return rcpp_result_gen;
END_RCPP
}
// auxiliary_mat
Rcpp::List auxiliary_mat(const int& r, const arma::mat& Lt);
RcppExport SEXP _FragmentCP_auxiliary_mat(SEXP rSEXP, SEXP LtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Lt(LtSEXP);
    rcpp_result_gen = Rcpp::wrap(auxiliary_mat(r, Lt));
    return rcpp_result_gen;
END_RCPP
}
// minimizeQ
arma::mat minimizeQ(const arma::mat& Lt, const arma::mat& Lr, const Rcpp::List& auxmat, const double lambda, const arma::vec& weight, const arma::mat& L0, const int& maxIt);
RcppExport SEXP _FragmentCP_minimizeQ(SEXP LtSEXP, SEXP LrSEXP, SEXP auxmatSEXP, SEXP lambdaSEXP, SEXP weightSEXP, SEXP L0SEXP, SEXP maxItSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Lt(LtSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Lr(LrSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type auxmat(auxmatSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type L0(L0SEXP);
    Rcpp::traits::input_parameter< const int& >::type maxIt(maxItSEXP);
    rcpp_result_gen = Rcpp::wrap(minimizeQ(Lt, Lr, auxmat, lambda, weight, L0, maxIt));
    return rcpp_result_gen;
END_RCPP
}
// minimizeL
arma::mat minimizeL(const arma::mat& Lt, const arma::mat& Lr, const Rcpp::List& auxmat, const double& lambda, const arma::vec& weight);
RcppExport SEXP _FragmentCP_minimizeL(SEXP LtSEXP, SEXP LrSEXP, SEXP auxmatSEXP, SEXP lambdaSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Lt(LtSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Lr(LrSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type auxmat(auxmatSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(minimizeL(Lt, Lr, auxmat, lambda, weight));
    return rcpp_result_gen;
END_RCPP
}
// C_hat
arma::mat C_hat(const arma::mat& Lt, const arma::mat& Lr, const Rcpp::List& auxmat, const double lambda, const arma::vec& weight, const int& maxIt);
RcppExport SEXP _FragmentCP_C_hat(SEXP LtSEXP, SEXP LrSEXP, SEXP auxmatSEXP, SEXP lambdaSEXP, SEXP weightSEXP, SEXP maxItSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Lt(LtSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Lr(LrSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type auxmat(auxmatSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxIt(maxItSEXP);
    rcpp_result_gen = Rcpp::wrap(C_hat(Lt, Lr, auxmat, lambda, weight, maxIt));
    return rcpp_result_gen;
END_RCPP
}
// cov_basis
Rcpp::List cov_basis(const arma::mat& Lt, const arma::mat& Ly, const arma::mat& Lr, const int& r, const double& lambda, const double& ext, const int& maxIt);
RcppExport SEXP _FragmentCP_cov_basis(SEXP LtSEXP, SEXP LySEXP, SEXP LrSEXP, SEXP rSEXP, SEXP lambdaSEXP, SEXP extSEXP, SEXP maxItSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Lt(LtSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Ly(LySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Lr(LrSEXP);
    Rcpp::traits::input_parameter< const int& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type ext(extSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxIt(maxItSEXP);
    rcpp_result_gen = Rcpp::wrap(cov_basis(Lt, Ly, Lr, r, lambda, ext, maxIt));
    return rcpp_result_gen;
END_RCPP
}
// error_seg_fragment
Rcpp::List error_seg_fragment(const arma::mat& Lt, const arma::mat& Ly, const arma::mat& Lr, const int& r, const int& s, const int& e, const double& lambda, const double& ext, const int& maxIt);
RcppExport SEXP _FragmentCP_error_seg_fragment(SEXP LtSEXP, SEXP LySEXP, SEXP LrSEXP, SEXP rSEXP, SEXP sSEXP, SEXP eSEXP, SEXP lambdaSEXP, SEXP extSEXP, SEXP maxItSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Lt(LtSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Ly(LySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Lr(LrSEXP);
    Rcpp::traits::input_parameter< const int& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const int& >::type e(eSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type ext(extSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxIt(maxItSEXP);
    rcpp_result_gen = Rcpp::wrap(error_seg_fragment(Lt, Ly, Lr, r, s, e, lambda, ext, maxIt));
    return rcpp_result_gen;
END_RCPP
}
// DP_fragment
Rcpp::List DP_fragment(const arma::mat& Lt, const arma::mat& Ly, const arma::mat& Lr, const int& r, const double& lambda, const double& xi, const double& ext, const int& maxIt, const int& Delta);
RcppExport SEXP _FragmentCP_DP_fragment(SEXP LtSEXP, SEXP LySEXP, SEXP LrSEXP, SEXP rSEXP, SEXP lambdaSEXP, SEXP xiSEXP, SEXP extSEXP, SEXP maxItSEXP, SEXP DeltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Lt(LtSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Ly(LySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Lr(LrSEXP);
    Rcpp::traits::input_parameter< const int& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const double& >::type ext(extSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxIt(maxItSEXP);
    Rcpp::traits::input_parameter< const int& >::type Delta(DeltaSEXP);
    rcpp_result_gen = Rcpp::wrap(DP_fragment(Lt, Ly, Lr, r, lambda, xi, ext, maxIt, Delta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FragmentCP_expM", (DL_FUNC) &_FragmentCP_expM, 2},
    {"_FragmentCP_RgradQ", (DL_FUNC) &_FragmentCP_RgradQ, 9},
    {"_FragmentCP_RhessianQ", (DL_FUNC) &_FragmentCP_RhessianQ, 10},
    {"_FragmentCP_deriv_fourier", (DL_FUNC) &_FragmentCP_deriv_fourier, 4},
    {"_FragmentCP_evaluate_basis", (DL_FUNC) &_FragmentCP_evaluate_basis, 3},
    {"_FragmentCP_auxiliary_mat", (DL_FUNC) &_FragmentCP_auxiliary_mat, 2},
    {"_FragmentCP_minimizeQ", (DL_FUNC) &_FragmentCP_minimizeQ, 7},
    {"_FragmentCP_minimizeL", (DL_FUNC) &_FragmentCP_minimizeL, 5},
    {"_FragmentCP_C_hat", (DL_FUNC) &_FragmentCP_C_hat, 6},
    {"_FragmentCP_cov_basis", (DL_FUNC) &_FragmentCP_cov_basis, 7},
    {"_FragmentCP_error_seg_fragment", (DL_FUNC) &_FragmentCP_error_seg_fragment, 9},
    {"_FragmentCP_DP_fragment", (DL_FUNC) &_FragmentCP_DP_fragment, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_FragmentCP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
